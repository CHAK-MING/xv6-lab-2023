1. Which registers contain arguments to functions? For example, which register holds 13 in main's call to printf?
answer:
① Function arguments are placed in registers a0-a7. If the number of arguments exceeds these registers' capacity, they are placed on the stack.
② a2

2. Where is the call to function f in the assembly code for main? Where is the call to g? (Hint: the compiler may inline functions.)
answer:
①   
  24:	4635                	li	a2,13
  26:	45b1                	li	a1,12
  because the functions are inlined, the process of function cannot to be seen in the assembly code.
  12 = f(8)
② 
  14:	250d                	addiw	a0,a0,3
  16:	6422                	ld	s0,8(sp) # 传入参数

3. At what address is the function printf located?
answer:
 34:	612080e7          	jalr	1554(ra) # 642 <printf>

void
printf(const char *fmt, ...)
{
 642:	711d                	addi	sp,sp,-96 # 642
 644:	ec06                	sd	ra,24(sp)


4. What value is in the register ra just after the jalr to printf in main?
answer:
ra = 0x38 , jalr next instruction.
38:	4501                	li	a0,0

5.Run the following code.

	unsigned int i = 0x00646c72;
	printf("H%x Wo%s", 57616, &i);
      
What is the output? Here's an ASCII table that maps bytes to characters.
The output depends on that fact that the RISC-V is little-endian. If the RISC-V were instead big-endian what would you set i to in order to yield the same output? Would you need to change 57616 to a different value?

Here's a description of little- and big-endian and a more whimsical description.

answer:
little-endian:72 6c 64 00
big-endian:00 64 6c 72
ouput:He110 World

if the RISC-V is big-endian, i = 0x726c6400